// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package userpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegistReq struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistReq) Reset()         { *m = RegistReq{} }
func (m *RegistReq) String() string { return proto.CompactTextString(m) }
func (*RegistReq) ProtoMessage()    {}
func (*RegistReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_7e7aa56806c644fd, []int{0}
}
func (m *RegistReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistReq.Unmarshal(m, b)
}
func (m *RegistReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistReq.Marshal(b, m, deterministic)
}
func (dst *RegistReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistReq.Merge(dst, src)
}
func (m *RegistReq) XXX_Size() int {
	return xxx_messageInfo_RegistReq.Size(m)
}
func (m *RegistReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegistReq proto.InternalMessageInfo

func (m *RegistReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegistReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegistResp struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistResp) Reset()         { *m = RegistResp{} }
func (m *RegistResp) String() string { return proto.CompactTextString(m) }
func (*RegistResp) ProtoMessage()    {}
func (*RegistResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_7e7aa56806c644fd, []int{1}
}
func (m *RegistResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistResp.Unmarshal(m, b)
}
func (m *RegistResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistResp.Marshal(b, m, deterministic)
}
func (dst *RegistResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistResp.Merge(dst, src)
}
func (m *RegistResp) XXX_Size() int {
	return xxx_messageInfo_RegistResp.Size(m)
}
func (m *RegistResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistResp.DiscardUnknown(m)
}

var xxx_messageInfo_RegistResp proto.InternalMessageInfo

func (m *RegistResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LoginReq struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_7e7aa56806c644fd, []int{2}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginReq.Unmarshal(m, b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
}
func (dst *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(dst, src)
}
func (m *LoginReq) XXX_Size() int {
	return xxx_messageInfo_LoginReq.Size(m)
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResp struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResp) Reset()         { *m = LoginResp{} }
func (m *LoginResp) String() string { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()    {}
func (*LoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_7e7aa56806c644fd, []int{3}
}
func (m *LoginResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResp.Unmarshal(m, b)
}
func (m *LoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResp.Marshal(b, m, deterministic)
}
func (dst *LoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResp.Merge(dst, src)
}
func (m *LoginResp) XXX_Size() int {
	return xxx_messageInfo_LoginResp.Size(m)
}
func (m *LoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResp proto.InternalMessageInfo

func (m *LoginResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*RegistReq)(nil), "userpb.RegistReq")
	proto.RegisterType((*RegistResp)(nil), "userpb.RegistResp")
	proto.RegisterType((*LoginReq)(nil), "userpb.LoginReq")
	proto.RegisterType((*LoginResp)(nil), "userpb.LoginResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Regist(ctx context.Context, in *RegistReq, opts ...grpc.CallOption) (*RegistResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Regist(ctx context.Context, in *RegistReq, opts ...grpc.CallOption) (*RegistResp, error) {
	out := new(RegistResp)
	err := c.cc.Invoke(ctx, "/userpb.User/Regist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/userpb.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Regist(context.Context, *RegistReq) (*RegistResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Regist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Regist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.User/Regist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Regist(ctx, req.(*RegistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userpb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Regist",
			Handler:    _User_Regist_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_7e7aa56806c644fd) }

var fileDescriptor_user_7e7aa56806c644fd = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xc1, 0x8e, 0x82, 0x30,
	0x10, 0x86, 0x97, 0xcd, 0xc2, 0xc2, 0x9c, 0x64, 0xe2, 0x81, 0x70, 0xd2, 0x1e, 0x8c, 0xa7, 0x26,
	0xea, 0x1b, 0xe8, 0x55, 0x13, 0x43, 0xf4, 0x01, 0x20, 0x4e, 0x08, 0x31, 0xd2, 0xda, 0xc1, 0xf8,
	0xfa, 0xa6, 0x94, 0x72, 0xe0, 0xea, 0xad, 0xdf, 0xfc, 0xcd, 0xd7, 0xf9, 0x0b, 0xf0, 0x62, 0x32,
	0x52, 0x1b, 0xd5, 0x29, 0x8c, 0xec, 0x59, 0x57, 0xe2, 0x00, 0x49, 0x41, 0x75, 0xc3, 0x5d, 0x41,
	0x4f, 0xcc, 0x21, 0xbe, 0x32, 0x99, 0xb6, 0x7c, 0x50, 0x16, 0x2c, 0x82, 0x75, 0x52, 0x8c, 0x6c,
	0xb3, 0x73, 0xc9, 0xfc, 0x56, 0xe6, 0x96, 0xfd, 0xba, 0xcc, 0xb3, 0x58, 0x01, 0x78, 0x09, 0x6b,
	0xcc, 0xe0, 0xff, 0x44, 0xcc, 0x65, 0xed, 0x25, 0x1e, 0xc5, 0x1e, 0xe2, 0xa3, 0xaa, 0x9b, 0xf6,
	0x9b, 0xb7, 0x96, 0x90, 0x0c, 0x0e, 0xd6, 0x38, 0x87, 0xf0, 0xa2, 0xee, 0xd4, 0x0e, 0x06, 0x07,
	0xdb, 0x06, 0xfe, 0xac, 0x0a, 0x37, 0x10, 0xb9, 0xb5, 0x30, 0x95, 0xae, 0xae, 0x1c, 0xbb, 0xe6,
	0x38, 0x1d, 0xb1, 0x16, 0x3f, 0x28, 0x21, 0xec, 0xed, 0x38, 0xf3, 0xb1, 0x5f, 0x38, 0x4f, 0x27,
	0x13, 0x7b, 0xbf, 0x8a, 0xfa, 0xdf, 0xdc, 0x7d, 0x02, 0x00, 0x00, 0xff, 0xff, 0x89, 0x49, 0x2e,
	0x42, 0x5b, 0x01, 0x00, 0x00,
}
